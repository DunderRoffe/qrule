// Copyright (C) 2016 Pelagicore
//
// You may use this file under the terms of the GPLv3 license.
// See the file LICENSE from this package for details.

/* This FLex file was machine-generated by the BNF converter */
%{
#include <string.h>
#include "Parser.H"
#define YY_BUFFER_LENGTH 4096
extern int yy_mylinenumber ;
static char YY_PARSED_STRING[YY_BUFFER_LENGTH];
static void YY_BUFFER_APPEND(char *s)
{
  strcat(YY_PARSED_STRING, s); //Do something better here!
}
static void YY_BUFFER_RESET(void)
{
  for(int x = 0; x < YY_BUFFER_LENGTH; x++)
    YY_PARSED_STRING[x] = 0;
}

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START YYINITIAL COMMENT CHAR CHARESC CHAREND STRING ESCAPED
%%

<YYINITIAL>"::"      	 return _SYMB_0;
<YYINITIAL>"??"      	 return _SYMB_1;
<YYINITIAL>""      	 return _SYMB_2;
<YYINITIAL>"."      	 return _SYMB_3;
<YYINITIAL>"("      	 return _SYMB_4;
<YYINITIAL>")"      	 return _SYMB_5;
<YYINITIAL>"+"      	 return _SYMB_6;
<YYINITIAL>"!"      	 return _SYMB_7;
<YYINITIAL>"="      	 return _SYMB_8;
<YYINITIAL>"<="      	 return _SYMB_9;
<YYINITIAL>">="      	 return _SYMB_10;
<YYINITIAL>"<"      	 return _SYMB_11;
<YYINITIAL>">"      	 return _SYMB_12;
<YYINITIAL>"&"      	 return _SYMB_13;
<YYINITIAL>"|"      	 return _SYMB_14;
<YYINITIAL>":"      	 return _SYMB_15;
<YYINITIAL>"->"      	 return _SYMB_16;
<YYINITIAL>"A"      	 return _SYMB_17;
<YYINITIAL>"AF"      	 return _SYMB_18;
<YYINITIAL>"AG"      	 return _SYMB_19;
<YYINITIAL>"AX"      	 return _SYMB_20;
<YYINITIAL>"Critical"      	 return _SYMB_21;
<YYINITIAL>"E"      	 return _SYMB_22;
<YYINITIAL>"EF"      	 return _SYMB_23;
<YYINITIAL>"EG"      	 return _SYMB_24;
<YYINITIAL>"EX"      	 return _SYMB_25;
<YYINITIAL>"False"      	 return _SYMB_26;
<YYINITIAL>"File"      	 return _SYMB_27;
<YYINITIAL>"Globally"      	 return _SYMB_28;
<YYINITIAL>"Imported"      	 return _SYMB_29;
<YYINITIAL>"Info"      	 return _SYMB_30;
<YYINITIAL>"Language"      	 return _SYMB_31;
<YYINITIAL>"Policy"      	 return _SYMB_32;
<YYINITIAL>"True"      	 return _SYMB_33;
<YYINITIAL>"U"      	 return _SYMB_34;
<YYINITIAL>"Warning"      	 return _SYMB_35;
<YYINITIAL>"col"      	 return _SYMB_36;
<YYINITIAL>"exist"      	 return _SYMB_37;
<YYINITIAL>"existing"      	 return _SYMB_38;
<YYINITIAL>"forAll"      	 return _SYMB_39;
<YYINITIAL>"in"      	 return _SYMB_40;
<YYINITIAL>"is"      	 return _SYMB_41;
<YYINITIAL>"match"      	 return _SYMB_42;
<YYINITIAL>"nodeType"      	 return _SYMB_43;
<YYINITIAL>"nrChildren"      	 return _SYMB_44;
<YYINITIAL>"possible"      	 return _SYMB_45;
<YYINITIAL>"row"      	 return _SYMB_46;
<YYINITIAL>"token"      	 return _SYMB_47;
<YYINITIAL>"value"      	 return _SYMB_48;
<YYINITIAL>"valueType"      	 return _SYMB_49;

<YYINITIAL>"#"[^\n]*\n  ++yy_mylinenumber ; 	 /* BNFC single-line comment */;
<YYINITIAL>"\""      	 BEGIN STRING;
<STRING>\\      	 BEGIN ESCAPED;
<STRING>\"      	 yylval.string_ = strdup(YY_PARSED_STRING); YY_BUFFER_RESET(); BEGIN YYINITIAL; return _STRING_;
<STRING>.      	 YY_BUFFER_APPEND(yytext);
<ESCAPED>n      	 YY_BUFFER_APPEND("\n"); BEGIN STRING;
<ESCAPED>\"      	 YY_BUFFER_APPEND("\""); BEGIN STRING ;
<ESCAPED>\\      	 YY_BUFFER_APPEND("\\"); BEGIN STRING;
<ESCAPED>t       	 YY_BUFFER_APPEND("\t"); BEGIN STRING;
<ESCAPED>.       	 YY_BUFFER_APPEND(yytext); BEGIN STRING;
<YYINITIAL>{DIGIT}+      	 yylval.int_ = atoi(yytext); return _INTEGER_;
<YYINITIAL>{LETTER}{IDENT}*      	 yylval.string_ = strdup(yytext); return _IDENT_;
\n  ++yy_mylinenumber ;
<YYINITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<YYINITIAL>.      	 return _ERROR_;
%%
int initialize_lexer(FILE *inp) { yyrestart(inp); BEGIN YYINITIAL; }
int yywrap(void) { return 1; }

//
