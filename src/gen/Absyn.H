// Copyright (C) 2016 Pelagicore
//
// You may use this file under the terms of the GPLv3 license.
// See the file LICENSE from this package for details.
//
// SPDX-License-Identifier: GPL-3.0

#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include <QPointer>
#include<string>
#include<vector>

#include <retType/RetType.h>

//C++ Abstract Syntax Interface generated by the BNF Converter.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;




/********************   Forward Declarations    ********************/

class RuleSet;
class Rule;
class ASTScope;
class RuleCause;
class Explanation;
class Tag;
class Severity;
class PathQuantifier;
class IAtom;
class SAtom;
class Expr;
class Filter;
class RSet;
class RRule;
class ASTGlobally;
class ASTFile;
class ASTImported;
class RCLang;
class RCPolicy;
class Explan;
class Noexplan;
class TTag;
class SevInfo;
class SevWarning;
class SevCritical;
class AG;
class AF;
class AX;
class AU;
class EG;
class EF;
class EX;
class EU;
class INrChildren;
class IRow;
class ICol;
class IQuant;
class IInt;
class SValue;
class SValueType;
class SNodeType;
class SQuant;
class SString;
class SConcat;
class ETrue;
class EFalse;
class EParant;
class ENot;
class EBEq;
class EPossToken;
class EExistToken;
class EILtEq;
class EIGtEq;
class EILt;
class EIGt;
class EIEq;
class EMatch;
class ESEq;
class EAnd;
class EOr;
class EForAllQ;
class EExistQ;
class EPQ;
class EImpl;
class FString;
class ListRule;
class ListExpr;
class ListFilter;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual QPointer<RetType> visitRuleSet(RuleSet *p) = 0;
  virtual QPointer<RetType> visitRule(Rule *p) = 0;
  virtual QPointer<RetType> visitASTScope(ASTScope *p) = 0;
  virtual QPointer<RetType> visitRuleCause(RuleCause *p) = 0;
  virtual QPointer<RetType> visitExplanation(Explanation *p) = 0;
  virtual QPointer<RetType> visitTag(Tag *p) = 0;
  virtual QPointer<RetType> visitSeverity(Severity *p) = 0;
  virtual QPointer<RetType> visitPathQuantifier(PathQuantifier *p) = 0;
  virtual QPointer<RetType> visitIAtom(IAtom *p) = 0;
  virtual QPointer<RetType> visitSAtom(SAtom *p) = 0;
  virtual QPointer<RetType> visitExpr(Expr *p) = 0;
  virtual QPointer<RetType> visitFilter(Filter *p) = 0;
  virtual QPointer<RetType> visitRSet(RSet *p) = 0;
  virtual QPointer<RetType> visitRRule(RRule *p) = 0;
  virtual QPointer<RetType> visitASTGlobally(ASTGlobally *p) = 0;
  virtual QPointer<RetType> visitASTFile(ASTFile *p) = 0;
  virtual QPointer<RetType> visitASTImported(ASTImported *p) = 0;
  virtual QPointer<RetType> visitRCLang(RCLang *p) = 0;
  virtual QPointer<RetType> visitRCPolicy(RCPolicy *p) = 0;
  virtual QPointer<RetType> visitExplan(Explan *p) = 0;
  virtual QPointer<RetType> visitNoexplan(Noexplan *p) = 0;
  virtual QPointer<RetType> visitTTag(TTag *p) = 0;
  virtual QPointer<RetType> visitSevInfo(SevInfo *p) = 0;
  virtual QPointer<RetType> visitSevWarning(SevWarning *p) = 0;
  virtual QPointer<RetType> visitSevCritical(SevCritical *p) = 0;
  virtual QPointer<RetType> visitAG(AG *p) = 0;
  virtual QPointer<RetType> visitAF(AF *p) = 0;
  virtual QPointer<RetType> visitAX(AX *p) = 0;
  virtual QPointer<RetType> visitAU(AU *p) = 0;
  virtual QPointer<RetType> visitEG(EG *p) = 0;
  virtual QPointer<RetType> visitEF(EF *p) = 0;
  virtual QPointer<RetType> visitEX(EX *p) = 0;
  virtual QPointer<RetType> visitEU(EU *p) = 0;
  virtual QPointer<RetType> visitINrChildren(INrChildren *p) = 0;
  virtual QPointer<RetType> visitIRow(IRow *p) = 0;
  virtual QPointer<RetType> visitICol(ICol *p) = 0;
  virtual QPointer<RetType> visitIQuant(IQuant *p) = 0;
  virtual QPointer<RetType> visitIInt(IInt *p) = 0;
  virtual QPointer<RetType> visitSValue(SValue *p) = 0;
  virtual QPointer<RetType> visitSValueType(SValueType *p) = 0;
  virtual QPointer<RetType> visitSNodeType(SNodeType *p) = 0;
  virtual QPointer<RetType> visitSQuant(SQuant *p) = 0;
  virtual QPointer<RetType> visitSString(SString *p) = 0;
  virtual QPointer<RetType> visitSConcat(SConcat *p) = 0;
  virtual QPointer<RetType> visitETrue(ETrue *p) = 0;
  virtual QPointer<RetType> visitEFalse(EFalse *p) = 0;
  virtual QPointer<RetType> visitEParant(EParant *p) = 0;
  virtual QPointer<RetType> visitENot(ENot *p) = 0;
  virtual QPointer<RetType> visitEBEq(EBEq *p) = 0;
  virtual QPointer<RetType> visitEPossToken(EPossToken *p) = 0;
  virtual QPointer<RetType> visitEExistToken(EExistToken *p) = 0;
  virtual QPointer<RetType> visitEILtEq(EILtEq *p) = 0;
  virtual QPointer<RetType> visitEIGtEq(EIGtEq *p) = 0;
  virtual QPointer<RetType> visitEILt(EILt *p) = 0;
  virtual QPointer<RetType> visitEIGt(EIGt *p) = 0;
  virtual QPointer<RetType> visitEIEq(EIEq *p) = 0;
  virtual QPointer<RetType> visitEMatch(EMatch *p) = 0;
  virtual QPointer<RetType> visitESEq(ESEq *p) = 0;
  virtual QPointer<RetType> visitEAnd(EAnd *p) = 0;
  virtual QPointer<RetType> visitEOr(EOr *p) = 0;
  virtual QPointer<RetType> visitEForAllQ(EForAllQ *p) = 0;
  virtual QPointer<RetType> visitEExistQ(EExistQ *p) = 0;
  virtual QPointer<RetType> visitEPQ(EPQ *p) = 0;
  virtual QPointer<RetType> visitEImpl(EImpl *p) = 0;
  virtual QPointer<RetType> visitFString(FString *p) = 0;
  virtual QPointer<RetType> visitListRule(ListRule *p) = 0;
  virtual QPointer<RetType> visitListExpr(ListExpr *p) = 0;
  virtual QPointer<RetType> visitListFilter(ListFilter *p) = 0;


  virtual QPointer<RetType> visitInteger(Integer x) = 0;
  virtual QPointer<RetType> visitChar(Char x) = 0;
  virtual QPointer<RetType> visitDouble(Double x) = 0;
  virtual QPointer<RetType> visitString(String x) = 0;
  virtual QPointer<RetType> visitIdent(Ident x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual QPointer<RetType> accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class RuleSet : public Visitable
{
public:
  virtual RuleSet *clone() const = 0;

};

class Rule : public Visitable
{
public:
  virtual Rule *clone() const = 0;

};

class ASTScope : public Visitable
{
public:
  virtual ASTScope *clone() const = 0;

};

class RuleCause : public Visitable
{
public:
  virtual RuleCause *clone() const = 0;

};

class Explanation : public Visitable
{
public:
  virtual Explanation *clone() const = 0;

};

class Tag : public Visitable
{
public:
  virtual Tag *clone() const = 0;

};

class Severity : public Visitable
{
public:
  virtual Severity *clone() const = 0;

};

class PathQuantifier : public Visitable
{
public:
  virtual PathQuantifier *clone() const = 0;

};

class IAtom : public Visitable
{
public:
  virtual IAtom *clone() const = 0;

};

class SAtom : public Visitable
{
public:
  virtual SAtom *clone() const = 0;

};

class Expr : public Visitable
{
public:
  virtual Expr *clone() const = 0;

};

class Filter : public Visitable
{
public:
  virtual Filter *clone() const = 0;

};



class RSet : public RuleSet
{
public:
  ListRule *listrule_;

  RSet(const RSet &);
  RSet &operator=(const RSet &);
  RSet(ListRule *p1);
  ~RSet();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual RSet *clone() const;
  void swap(RSet &);
};

class RRule : public Rule
{
public:
  Tag *tag_;
  Severity *severity_;
  RuleCause *rulecause_;
  ASTScope *astscope_;
  Explanation *explanation_;
  Expr *expr_;

  RRule(const RRule &);
  RRule &operator=(const RRule &);
  RRule(Tag *p1, Severity *p2, RuleCause *p3, ASTScope *p4, Explanation *p5, Expr *p6);
  ~RRule();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual RRule *clone() const;
  void swap(RRule &);
};

class ASTGlobally : public ASTScope
{
public:

  ASTGlobally(const ASTGlobally &);
  ASTGlobally &operator=(const ASTGlobally &);
  ASTGlobally();
  ~ASTGlobally();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual ASTGlobally *clone() const;
  void swap(ASTGlobally &);
};

class ASTFile : public ASTScope
{
public:

  ASTFile(const ASTFile &);
  ASTFile &operator=(const ASTFile &);
  ASTFile();
  ~ASTFile();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual ASTFile *clone() const;
  void swap(ASTFile &);
};

class ASTImported : public ASTScope
{
public:

  ASTImported(const ASTImported &);
  ASTImported &operator=(const ASTImported &);
  ASTImported();
  ~ASTImported();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual ASTImported *clone() const;
  void swap(ASTImported &);
};

class RCLang : public RuleCause
{
public:

  RCLang(const RCLang &);
  RCLang &operator=(const RCLang &);
  RCLang();
  ~RCLang();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual RCLang *clone() const;
  void swap(RCLang &);
};

class RCPolicy : public RuleCause
{
public:

  RCPolicy(const RCPolicy &);
  RCPolicy &operator=(const RCPolicy &);
  RCPolicy();
  ~RCPolicy();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual RCPolicy *clone() const;
  void swap(RCPolicy &);
};

class Explan : public Explanation
{
public:
  String string_;

  Explan(const Explan &);
  Explan &operator=(const Explan &);
  Explan(String p1);
  ~Explan();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual Explan *clone() const;
  void swap(Explan &);
};

class Noexplan : public Explanation
{
public:

  Noexplan(const Noexplan &);
  Noexplan &operator=(const Noexplan &);
  Noexplan();
  ~Noexplan();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual Noexplan *clone() const;
  void swap(Noexplan &);
};

class TTag : public Tag
{
public:
  String string_;

  TTag(const TTag &);
  TTag &operator=(const TTag &);
  TTag(String p1);
  ~TTag();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual TTag *clone() const;
  void swap(TTag &);
};

class SevInfo : public Severity
{
public:

  SevInfo(const SevInfo &);
  SevInfo &operator=(const SevInfo &);
  SevInfo();
  ~SevInfo();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual SevInfo *clone() const;
  void swap(SevInfo &);
};

class SevWarning : public Severity
{
public:

  SevWarning(const SevWarning &);
  SevWarning &operator=(const SevWarning &);
  SevWarning();
  ~SevWarning();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual SevWarning *clone() const;
  void swap(SevWarning &);
};

class SevCritical : public Severity
{
public:

  SevCritical(const SevCritical &);
  SevCritical &operator=(const SevCritical &);
  SevCritical();
  ~SevCritical();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual SevCritical *clone() const;
  void swap(SevCritical &);
};

class AG : public PathQuantifier
{
public:
  Expr *expr_;

  AG(const AG &);
  AG &operator=(const AG &);
  AG(Expr *p1);
  ~AG();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual AG *clone() const;
  void swap(AG &);
};

class AF : public PathQuantifier
{
public:
  Expr *expr_;

  AF(const AF &);
  AF &operator=(const AF &);
  AF(Expr *p1);
  ~AF();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual AF *clone() const;
  void swap(AF &);
};

class AX : public PathQuantifier
{
public:
  Expr *expr_;

  AX(const AX &);
  AX &operator=(const AX &);
  AX(Expr *p1);
  ~AX();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual AX *clone() const;
  void swap(AX &);
};

class AU : public PathQuantifier
{
public:
  Expr *expr_1;
  Expr *expr_2;

  AU(const AU &);
  AU &operator=(const AU &);
  AU(Expr *p1, Expr *p2);
  ~AU();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual AU *clone() const;
  void swap(AU &);
};

class EG : public PathQuantifier
{
public:
  Expr *expr_;

  EG(const EG &);
  EG &operator=(const EG &);
  EG(Expr *p1);
  ~EG();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EG *clone() const;
  void swap(EG &);
};

class EF : public PathQuantifier
{
public:
  Expr *expr_;

  EF(const EF &);
  EF &operator=(const EF &);
  EF(Expr *p1);
  ~EF();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EF *clone() const;
  void swap(EF &);
};

class EX : public PathQuantifier
{
public:
  Expr *expr_;

  EX(const EX &);
  EX &operator=(const EX &);
  EX(Expr *p1);
  ~EX();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EX *clone() const;
  void swap(EX &);
};

class EU : public PathQuantifier
{
public:
  Expr *expr_1;
  Expr *expr_2;

  EU(const EU &);
  EU &operator=(const EU &);
  EU(Expr *p1, Expr *p2);
  ~EU();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EU *clone() const;
  void swap(EU &);
};

class INrChildren : public IAtom
{
public:

  INrChildren(const INrChildren &);
  INrChildren &operator=(const INrChildren &);
  INrChildren();
  ~INrChildren();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual INrChildren *clone() const;
  void swap(INrChildren &);
};

class IRow : public IAtom
{
public:

  IRow(const IRow &);
  IRow &operator=(const IRow &);
  IRow();
  ~IRow();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual IRow *clone() const;
  void swap(IRow &);
};

class ICol : public IAtom
{
public:

  ICol(const ICol &);
  ICol &operator=(const ICol &);
  ICol();
  ~ICol();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual ICol *clone() const;
  void swap(ICol &);
};

class IQuant : public IAtom
{
public:
  Ident ident_;
  IAtom *iatom_;

  IQuant(const IQuant &);
  IQuant &operator=(const IQuant &);
  IQuant(Ident p1, IAtom *p2);
  ~IQuant();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual IQuant *clone() const;
  void swap(IQuant &);
};

class IInt : public IAtom
{
public:
  Integer integer_;

  IInt(const IInt &);
  IInt &operator=(const IInt &);
  IInt(Integer p1);
  ~IInt();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual IInt *clone() const;
  void swap(IInt &);
};

class SValue : public SAtom
{
public:

  SValue(const SValue &);
  SValue &operator=(const SValue &);
  SValue();
  ~SValue();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual SValue *clone() const;
  void swap(SValue &);
};

class SValueType : public SAtom
{
public:

  SValueType(const SValueType &);
  SValueType &operator=(const SValueType &);
  SValueType();
  ~SValueType();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual SValueType *clone() const;
  void swap(SValueType &);
};

class SNodeType : public SAtom
{
public:

  SNodeType(const SNodeType &);
  SNodeType &operator=(const SNodeType &);
  SNodeType();
  ~SNodeType();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual SNodeType *clone() const;
  void swap(SNodeType &);
};

class SQuant : public SAtom
{
public:
  Ident ident_;
  SAtom *satom_;

  SQuant(const SQuant &);
  SQuant &operator=(const SQuant &);
  SQuant(Ident p1, SAtom *p2);
  ~SQuant();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual SQuant *clone() const;
  void swap(SQuant &);
};

class SString : public SAtom
{
public:
  String string_;

  SString(const SString &);
  SString &operator=(const SString &);
  SString(String p1);
  ~SString();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual SString *clone() const;
  void swap(SString &);
};

class SConcat : public SAtom
{
public:
  SAtom *satom_1;
  SAtom *satom_2;

  SConcat(const SConcat &);
  SConcat &operator=(const SConcat &);
  SConcat(SAtom *p1, SAtom *p2);
  ~SConcat();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual SConcat *clone() const;
  void swap(SConcat &);
};

class ETrue : public Expr
{
public:

  ETrue(const ETrue &);
  ETrue &operator=(const ETrue &);
  ETrue();
  ~ETrue();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual ETrue *clone() const;
  void swap(ETrue &);
};

class EFalse : public Expr
{
public:

  EFalse(const EFalse &);
  EFalse &operator=(const EFalse &);
  EFalse();
  ~EFalse();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EFalse *clone() const;
  void swap(EFalse &);
};

class EParant : public Expr
{
public:
  Expr *expr_;

  EParant(const EParant &);
  EParant &operator=(const EParant &);
  EParant(Expr *p1);
  ~EParant();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EParant *clone() const;
  void swap(EParant &);
};

class ENot : public Expr
{
public:
  Expr *expr_;

  ENot(const ENot &);
  ENot &operator=(const ENot &);
  ENot(Expr *p1);
  ~ENot();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual ENot *clone() const;
  void swap(ENot &);
};

class EBEq : public Expr
{
public:
  Expr *expr_1;
  Expr *expr_2;

  EBEq(const EBEq &);
  EBEq &operator=(const EBEq &);
  EBEq(Expr *p1, Expr *p2);
  ~EBEq();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EBEq *clone() const;
  void swap(EBEq &);
};

class EPossToken : public Expr
{
public:
  String string_;

  EPossToken(const EPossToken &);
  EPossToken &operator=(const EPossToken &);
  EPossToken(String p1);
  ~EPossToken();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EPossToken *clone() const;
  void swap(EPossToken &);
};

class EExistToken : public Expr
{
public:
  String string_;

  EExistToken(const EExistToken &);
  EExistToken &operator=(const EExistToken &);
  EExistToken(String p1);
  ~EExistToken();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EExistToken *clone() const;
  void swap(EExistToken &);
};

class EILtEq : public Expr
{
public:
  IAtom *iatom_1;
  IAtom *iatom_2;

  EILtEq(const EILtEq &);
  EILtEq &operator=(const EILtEq &);
  EILtEq(IAtom *p1, IAtom *p2);
  ~EILtEq();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EILtEq *clone() const;
  void swap(EILtEq &);
};

class EIGtEq : public Expr
{
public:
  IAtom *iatom_1;
  IAtom *iatom_2;

  EIGtEq(const EIGtEq &);
  EIGtEq &operator=(const EIGtEq &);
  EIGtEq(IAtom *p1, IAtom *p2);
  ~EIGtEq();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EIGtEq *clone() const;
  void swap(EIGtEq &);
};

class EILt : public Expr
{
public:
  IAtom *iatom_1;
  IAtom *iatom_2;

  EILt(const EILt &);
  EILt &operator=(const EILt &);
  EILt(IAtom *p1, IAtom *p2);
  ~EILt();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EILt *clone() const;
  void swap(EILt &);
};

class EIGt : public Expr
{
public:
  IAtom *iatom_1;
  IAtom *iatom_2;

  EIGt(const EIGt &);
  EIGt &operator=(const EIGt &);
  EIGt(IAtom *p1, IAtom *p2);
  ~EIGt();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EIGt *clone() const;
  void swap(EIGt &);
};

class EIEq : public Expr
{
public:
  IAtom *iatom_1;
  IAtom *iatom_2;

  EIEq(const EIEq &);
  EIEq &operator=(const EIEq &);
  EIEq(IAtom *p1, IAtom *p2);
  ~EIEq();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EIEq *clone() const;
  void swap(EIEq &);
};

class EMatch : public Expr
{
public:
  SAtom *satom_;
  String string_;

  EMatch(const EMatch &);
  EMatch &operator=(const EMatch &);
  EMatch(SAtom *p1, String p2);
  ~EMatch();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EMatch *clone() const;
  void swap(EMatch &);
};

class ESEq : public Expr
{
public:
  SAtom *satom_1;
  SAtom *satom_2;

  ESEq(const ESEq &);
  ESEq &operator=(const ESEq &);
  ESEq(SAtom *p1, SAtom *p2);
  ~ESEq();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual ESEq *clone() const;
  void swap(ESEq &);
};

class EAnd : public Expr
{
public:
  Expr *expr_1;
  Expr *expr_2;

  EAnd(const EAnd &);
  EAnd &operator=(const EAnd &);
  EAnd(Expr *p1, Expr *p2);
  ~EAnd();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EAnd *clone() const;
  void swap(EAnd &);
};

class EOr : public Expr
{
public:
  Expr *expr_1;
  Expr *expr_2;

  EOr(const EOr &);
  EOr &operator=(const EOr &);
  EOr(Expr *p1, Expr *p2);
  ~EOr();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EOr *clone() const;
  void swap(EOr &);
};

class EForAllQ : public Expr
{
public:
  Ident ident_;
  ListFilter *listfilter_;
  Expr *expr_;

  EForAllQ(const EForAllQ &);
  EForAllQ &operator=(const EForAllQ &);
  EForAllQ(Ident p1, ListFilter *p2, Expr *p3);
  ~EForAllQ();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EForAllQ *clone() const;
  void swap(EForAllQ &);
};

class EExistQ : public Expr
{
public:
  Ident ident_;
  ListFilter *listfilter_;
  Expr *expr_;

  EExistQ(const EExistQ &);
  EExistQ &operator=(const EExistQ &);
  EExistQ(Ident p1, ListFilter *p2, Expr *p3);
  ~EExistQ();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EExistQ *clone() const;
  void swap(EExistQ &);
};

class EPQ : public Expr
{
public:
  PathQuantifier *pathquantifier_;

  EPQ(const EPQ &);
  EPQ &operator=(const EPQ &);
  EPQ(PathQuantifier *p1);
  ~EPQ();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EPQ *clone() const;
  void swap(EPQ &);
};

class EImpl : public Expr
{
public:
  Expr *expr_1;
  Expr *expr_2;

  EImpl(const EImpl &);
  EImpl &operator=(const EImpl &);
  EImpl(Expr *p1, Expr *p2);
  ~EImpl();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual EImpl *clone() const;
  void swap(EImpl &);
};

class FString : public Filter
{
public:
  String string_;

  FString(const FString &);
  FString &operator=(const FString &);
  FString(String p1);
  ~FString();
  virtual QPointer<RetType> accept(Visitor *v);
  virtual FString *clone() const;
  void swap(FString &);
};



class ListRule : public Visitable, public std::vector<Rule*>
{
public:
  virtual QPointer<RetType> accept(Visitor *v);
  virtual ListRule *clone() const;
};

class ListExpr : public Visitable, public std::vector<Expr*>
{
public:
  virtual QPointer<RetType> accept(Visitor *v);
  virtual ListExpr *clone() const;
};

class ListFilter : public Visitable, public std::vector<Filter*>
{
public:
  virtual QPointer<RetType> accept(Visitor *v);
  virtual ListFilter *clone() const;
};



#endif
